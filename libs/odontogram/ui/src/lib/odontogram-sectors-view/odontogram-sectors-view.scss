@use "sass:list";

$pendingColor: #fba2a2;
$finishedColor: #80ded9;

* {
  box-sizing: border-box;
}

:host {
  display: flex;
  flex-direction: column;
  row-gap: 1em;
  width: 100%;
}

.odontogram {
  border: 1px solid #444444;

  grid-area: odontogram;
  user-select: none;
  display: flex;
  flex-wrap: wrap;
  flex-direction: row;
  row-gap: 1em;
  align-items: center;
  position: relative;
  width: 100%;
  height: 100%;
  padding: 0.5em;

  // Background color to match the images,
  // ideally we should find a way to make the images transparent
  // so we could use whichever background color we want
  background-color: #fff;

  &.loading {
    .sector {
      display: none;
    }
  }

  .super-bg {
    position: absolute;
    width: 100%;
    height: 100%;
    background-color: #44444444;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 5;
    font-size: 2.5em;
    left: 0;
  }

  .sector {
    display: flex;
    flex: 1 1 50%;

    // Changes the direction of the sectors 1 and 3 to start from the right
    // Uses direction: rtl instead of row-reverse because the borders of the numbers
    // don't respect row-reverse but do respect direction
    &.upper-left,
    &.bottom-left {
      direction: rtl;
    }

    $sectors: ();

    @for $i from 0 through 3 {
      $sectors: list.append($sectors, "&.sector-#{$i}", comma);
    }

    #{$sectors} {
      &.upper-left {
        order: 1;
      }

      &.upper-right {
        order: 2;
      }

      &.bottom-left {
        order: 3;
      }

      &.bottom-right {
        order: 4;
      }
    }

    $sectors: (); // Reset the list

    @for $i from 4 through 7 {
      $sectors: list.append($sectors, "&.sector-#{$i}", comma);
    }

    #{$sectors} {
      &.upper-left {
        order: 5;
      }

      &.upper-right {
        order: 6;
      }

      &.bottom-left {
        order: 7;
      }

      &.bottom-right {
        order: 8;
      }
    }

    // Selects the odd sectors that have a treatment in the first tooth
    // and checks if the next sector also has a treatment in the first tooth,
    // in which case it removes the border radius of the first tooth of both sectors
    &:nth-child(odd):has(
        .tooth-component-container:first-child .tooth.withTreatment
      ):has(
        + .sector .tooth-component-container:first-child .tooth.withTreatment
      ) {
      ::ng-deep {
        .tooth-component-container:first-child .tooth .number,
        + .sector .tooth-component-container:first-child .tooth .number {
          border-start-start-radius: 0;
          border-end-start-radius: 0;
        }
      }
    }

    .tooth-component-container {
      flex: 1;

      position: relative;
      cursor: pointer;

      &.invisible {
        visibility: hidden;
      }

      &:hover,
      &.active {
        // Adds a background color over the tooth
        // It has alpha to not hide the images
        &:before {
          content: "";
          width: 100%;
          height: 100%;
          background-color: #11111111;
          position: absolute;
          z-index: 3;
          border-radius: 0.25rem;
          pointer-events: none;
          right: 0;
        }
      }

      &.active {
        cursor: inherit;
      }

      // If the tooth has a treatment, it checks if the next sibling also has a treatment,
      // in which case it removes the border radius at the end for itself and removes the initial border of the sibling
      &:has(.tooth.withTreatment) {
        // By using :has with the "+ " selector, you can check the classes and elements of the next sibling
        &:has(+ .tooth-component-container .tooth.withTreatment) {
          ::ng-deep {
            .tooth .number {
              border-start-end-radius: 0;
              border-end-end-radius: 0;
            }
          }

          // Use + (sibling selector) with * because the previous selector already checks the classes of the sibling
          + * {
            ::ng-deep {
              .tooth .number {
                border-start-start-radius: 0;
                border-end-start-radius: 0;
              }
            }
          }
        }
      }
    }
  }
}

.global-treatments {
  display: flex;
  flex-direction: column;
  row-gap: 0.75em;

  .product-search {
    ::ng-deep {
      &,
      .p-autocomplete,
      .p-autocomplete-input {
        width: 100%;
      }
    }
  }

  .treatments {
    display: flex;
    flex-direction: column;
    row-gap: 0.75em;

    .treatment {
      display: flex;
      column-gap: 0.5em;

      .ref {
        flex: 0 0 20%;
      }

      .status {
        display: flex;
        flex-grow: 1;
        column-gap: 0.5em;
        justify-content: space-around;
        align-items: center;
        padding: 0.35em;
        border-radius: 0.25em;
        background: #11111111;
        margin-left: auto;

        div {
          display: flex;
          column-gap: 0.15em;
          cursor: pointer;
          align-items: center;

          .pending {
            color: $pendingColor;
            text-decoration-color: $pendingColor;
          }

          .finished {
            color: $finishedColor;
            text-decoration-color: $finishedColor;
          }

          &.active {
            font-weight: 700;
            cursor: default;
          }

          &:hover,
          &.active {
            span {
              text-decoration: underline;
            }
          }
        }
      }
    }
  }
}
